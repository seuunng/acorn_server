plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'application' 
}

group = 'com.acorn'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	 implementation 'mysql:mysql-connector-java:8.0.33' // MySQL JDBC 드라이버
	 implementation files('libs/mysql-connector-java-9.0.0.jar')
    
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
	
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}
springBoot {
   
}
application {
    mainClass = 'com.acorn.erp.AcornServerApplication'
}
def webappDir = "$projectDir/src/main/acorn_erp"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
		}
	}
}


task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$webappDir"
	inputs.dir "$webappDir/src" // 리액트 소스 디렉토리 지정
    outputs.dir "$webappDir/build" // 리액트 빌드 디렉토리 지정
	group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "run-script", "build"
		} else {
			commandLine "npm", "run-script", "build"
		}
}

task installReact(type: Exec) {
	workingDir "$webappDir"
	inputs.files "$webappDir/package.json", "$webappDir/package-lock.json" // 종속성 파일 지정
    outputs.dir "$webappDir/node_modules" // 종속성 설치 디렉토리 지정
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}
processResources {
	dependsOn "buildReact"
	from("$webappDir/build") {
        into 'static'
    }
}
build {
    dependsOn 'processResources'
}
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters" // -parameters 옵션을 추가
}

